from model import *
import sys


class IO_abaqus:
    def __init__(self, model):
        self.model = model
        self.inpDatabase = {"Title": ["*Heading", ' CurrUnits="N, m, kg"', "** Job name: Job-20210916 Model name: Model--20210916",
                                        "** Generated by: Abaqus/CAE 6.14-1"],
               "Printout": ["*Preprint, echo=NO, model=NO, history=NO, contact=NO"],
               "Parts": ["**", "** PARTS", "**", "N/A", "**"],
               "Assembly": ["**", "** ASSEMBLY", "**", "*Assembly, name=Assembly", "**", "N/A", "*End Assembly"],
               "Materials": ["**", "** MATERIALS", "**", "N/A"],
               "Amplitudes": ["**", "** AMPLITUDE CURVES", "**", "N/A", ],
               "Steps": {"N/A"}, }

        self.job_name = "Job-1"
        self.model_name = "Model-1"
        self.part_name = "Part-1"
        self.instance_name = "Instance-1"
        self.material_name = "Material-1"

        self.datalines = "*Heading\n"
        self.datalines += "** Job name: Job-1 Model name: Model-1\n"
        self.datalines += "** Generated by: taichi-TopOpt\n"
        self.datalines += "*Preprint, echo = NO, model = NO, history = NO, contact = NO\n"

    def write_inp(self, path):
        try:
            op = open(path, 'w')
            op.write(self.datalines)

        except IOError as ex:
            print(ex)
            print('Fail to output')
        finally:
            op.close()

    def default_inp(self, path):
        self.create_part()
        self.create_assembly()
        self.create_materials()
        self.write_inp(path)

    def create_part(self, nodesets=[], elemsets=[]):
        line1 = "*Part, name=%s" % self.part_name
        datalines = [line1, ]
        nodedatalines = ["*Node", ]
        elemdatalines = []

        for node in self.model.nodes:
            nlabel, x, y, z = node.ID+1, node[0], node[1], node[2]
            s1 = "%s," % nlabel
            s2 = "%s," % float(x)
            s3 = "%s," % float(y)
            s4 = "%s" % float(z)
            s1 = s1.rjust(8, " ")
            s2 = s2.rjust(14, " ")
            s3 = s3.rjust(14, " ")
            s4 = s4.rjust(13, " ")
            line2 = s1 + s2 + s3 + s4
            nodedatalines.append(line2)
        elemInfos = {"SOLID": {"C3D4": [], "C3D6": [], "C3D8": [], "C3D10": [], "C3D15": [], "C3D20": [], },
                     "BEAM": {"B31": [], "B32": [], },
                     "SHELL": {"S3": [], "S4": [], "S8": [], }}
        for elem in self.model.elements:
            elabel, etype, nodelabels = elem.ID+1, elem.type_abaqus, elem.cont_nds
            nodenum = len(nodelabels)
            if etype == "SOLID":
                if nodenum == 4:
                    elemInfos["SOLID"]["C3D4"].append([elabel, nodelabels])
                if nodenum == 6:
                    elemInfos["SOLID"]["C3D6"].append([elabel, nodelabels])
                if nodenum == 8:
                    elemInfos["SOLID"]["C3D8"].append([elabel, nodelabels])
                if nodenum == 10:
                    elemInfos["SOLID"]["C3D10"].append([elabel, nodelabels])
                if nodenum == 15:
                    elemInfos["SOLID"]["C3D15"].append([elabel, nodelabels])
                if nodenum == 20:
                    elemInfos["SOLID"]["C3D20"].append([elabel, nodelabels])
            if etype == "SHELL":
                if nodenum == 3:
                    elemInfos["SHELL"]["S3"].append([elabel, nodelabels])
                if nodenum == 4:
                    elemInfos["SHELL"]["S4"].append([elabel, nodelabels])
                if nodenum == 8:
                    elemInfos["SHELL"]["S8"].append([elabel, nodelabels])
            if etype == "BEAM":
                if nodenum == 2:
                    elemInfos["BEAM"]["B31"].append([elabel, nodelabels])
                if nodenum == 3:
                    elemInfos["BEAM"]["B32"].append([elabel, nodelabels])

        for etype in elemInfos.keys():
            for etname in elemInfos[etype].keys():
                elems = elemInfos[etype][etname]
                if len(elems) > 0:
                    line3 = "*Element, type=%s" % etname
                    elemdatalines.append(line3)
                    for elem in elems:
                        elabel, nodelabels = elem
                        s1 = "%s," % elabel
                        s1 = s1.rjust(8, " ")
                        line4 = s1
                        for nodelabel in nodelabels:
                            s3 = "%s," % (nodelabel+1)
                            s3 = s3.rjust(8, " ")
                            line4 = line4 + s3
                        line4 = line4[:len(line4)-1]
                        if len(nodelabels) <= 8:
                            elemdatalines.append(line4[:72])
                        else:
                            elemdatalines.append("        " + line4[72:])
        for nodeset in nodesets:
            setname, nodelabels = nodeset[0], nodeset[1]
            line5 = "*Nset, nset=%s" % setname
            elemdatalines.append(line5)
            rst1, rst2 = len(nodelabels) // 8, len(nodelabels) % 8
            for k in range(rst1):
                i, j = int(k * 10), int(k * 10 + 10)
                line6 = ""
                for nodelabel in nodelabels[i:j]:
                    s4 = "%s," % nodelabel
                    s5 = s4.rjust(8, " ")
                    line6 = line6 + s5
                line6 = line6[:-1]
                elemdatalines.append(line6)
            k = rst1 * 10
            line7 = ""
            for nodelabel in nodelabels[k:]:
                s6 = "%s," % nodelabel
                s7 = s6.rjust(8, " ")
                line7 = line7 + s7
            if len(line7) > 0:
                line7 = line7[:-1]
                elemdatalines.append(line7)
        for elemset in elemsets:
            setname, elemlabels = elemset[0], elemset[1]
            line8 = "*Elset, elset=%s" % setname
            elemdatalines.append(line8)
            rst1, rst2 = len(elemlabels) // 8, len(elemlabels) % 8
            for k in range(rst1):
                i, j = int(k * 10), int(k * 10 + 10)
                line9 = ""
                for elemlabel in elemlabels[i:j]:
                    s8 = "%s," % elemlabel
                    s9 = s8.rjust(8, " ")
                    line9 = line9 + s9
                line9 = line9[:-1]
                elemdatalines.append(line9)
            k = rst1 * 10
            line1 = ""
            for elemlabel in elemlabels[k:]:
                s1 = "%s," % elemlabel
                s2 = s1.rjust(8, " ")
                line1 = line1 + s2
            if len(line1) > 0:
                line1 = line1[:-1]
                elemdatalines.append(line1)
        datalines = datalines + nodedatalines + elemdatalines + ["*End Part", ]
        try:
            global parts
            parts = parts + datalines
            self.inpDatabase["Parts"][3] = parts
        except:
            pass
        for line in datalines:
            self.datalines += line + '\n'

    def create_assembly(self):
        global datalines
        datalines = []
        line1 = "*Instance, name=%s, part=%s" % (self.instance_name, self.part_name)
        line2 = "*End Instance"
        line3 = "**"
        datalines = datalines + [line1, line2, line3]
        try:
            global assembly
            assembly = assembly + datalines
            self.inpDatabase["Assembly"][5] = assembly
        except:
            pass
        for line in datalines:
            self.datalines += line + '\n'

    def create_materials(self, alpha=0, beta=0, composite=0, structural=0):
        datalines = []
        line1 = "*Material, name=%s" % self.material_name
        line2 = "*Damping, alpha=%s, beta=%s, composite=%s, structural=%s" % (alpha, beta, composite, structural)
        line3 = "*Density"
        line4 = "%s," % self.model.rho
        line5 = "*Elastic"
        line6 = "%s, %s" % (self.model.E, self.model.nu)
        datalines = datalines + [line1, line2, line3, line4, line5, line6, ]
        try:
            global materials
            materials = materials + datalines
            self.inpDatabase["Materials"][3] = materials
        except:
            pass
        for line in datalines:
            self.datalines += line + '\n'


if __name__ == '__main__':
    nd0 = Node(0., 0.)
    nd1 = Node(0., 1.)
    nd2 = Node(1., 0.)
    nd3 = Node(1., 1.)
    nd4 = Node(2., 1.)
    nodes = [nd0, nd1, nd2, nd3, nd4]

    ele0 = Triangle([nd0, nd1, nd2])
    ele1 = Triangle([nd1, nd2, nd3])
    ele2 = Triangle([nd2, nd3, nd4])
    elems = [ele0,ele1, ele2]

    loads = []
    supports = []

    model = Model(nodes,elems, loads, supports)
    model.cal_adjacent_nodes()
    model.cal_adjacent_elements()

    output = IO_abaqus(model)
    output.default_inp("Job.inp")
